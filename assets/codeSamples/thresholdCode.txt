# latest Image Processing applied
# helps apply image processing tools to images.

import cv2
import numpy as np

class filter:

def threshold(self, currentThreshold):
    self.lastFilter = currentThreshold
    self.initializeSlider()
    self.thesholdCodeHelper()
    self.processedImage = self.originalImage.copy()
    if self.grayCheck.isChecked:
        if len(self.processedImage.shape) > 2:
            self.processedImage = cv2.cvtColor(self.processedImage, cv2.COLOR_BGR2GRAY)
        self.displayImage(2)
    else:
        self.processedImage = self.originalImage.copy()
        self.displayImage(2)
    # cant use a switch case because the names are strings and not int. I can convert them to int by having case(
    # 1) : threshold='BinaryThreshold' break but it is too long
    if currentThreshold == 'BinaryThreshold':
        self.lastFilter = 'BinaryThreshold'
        self.initializeSlider(s=0, e=255)
        ret, self.processedImage = cv2.threshold(self.processedImage, self.slider.value(), 255, cv2.THRESH_BINARY)
    elif currentThreshold == 'BinaryInverseThreshold':
        self.lastFilter = 'BinaryInverseThreshold'
        self.initializeSlider(s=0, e=255)
        ret, self.processedImage = cv2.threshold(self.processedImage, self.slider.value(), 255,
                                                 cv2.THRESH_BINARY_INV)
    elif currentThreshold == 'TruncThreshold':
        self.lastFilter = 'TruncThreshold'
        self.initializeSlider(s=0, e=255)
        ret, self.processedImage = cv2.threshold(self.processedImage, self.slider.value(), 255, cv2.THRESH_TRUNC)
    elif currentThreshold == 'TozeroThreshold':
        self.lastFilter = 'TozeroThreshold'
        self.initializeSlider(s=0, e=255)
        ret, self.processedImage = cv2.threshold(self.processedImage, self.slider.value(), 255, cv2.THRESH_TOZERO)
    elif currentThreshold == 'TozeroThresholdInverse':
        self.lastFilter = 'TozeroThresholdInverse'
        self.initializeSlider(s=0, e=255)
        ret, self.processedImage = cv2.threshold(self.processedImage, self.slider.value(), 255,
                                                 cv2.THRESH_TOZERO_INV)
    elif currentThreshold == 'AdaptiveThreshold_Mean_C':
        self.lastFilter = 'AdaptiveThreshold_Mean_C'
        self.initializeSlider(s=3, e=21)
        if self.slider.value() % 2 == 0: self.slider.setValue(self.slider.value() + 1)
        self.processedImage = cv2.adaptiveThreshold(self.processedImage, 255, cv2.ADAPTIVE_THRESH_MEAN_C,
                                                    cv2.THRESH_BINARY, self.slider.value(), 2)
    elif currentThreshold == 'AdaptiveThreshold_Gaussian':
        self.lastFilter = 'AdaptiveThreshold_Gaussian'
        self.initializeSlider(s=3, e=15)
        if self.slider.value() % 2 == 0: self.slider.setValue(self.slider.value() + 1)
        self.processedImage = cv2.adaptiveThreshold(self.processedImage, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                                    cv2.THRESH_BINARY, self.slider.value(), 2)
    elif currentThreshold == 'OtsuThreshold':
        self.lastFilter = 'OtsuThreshold'
        self.initializeSlider(s=0, e=255)
        ret2, self.processedImage = cv2.threshold(self.processedImage, self.slider.value(), 255, cv2.THRESH_BINARY,
                                                  cv2.THRESH_OTSU)

    self.displayImage(2)
